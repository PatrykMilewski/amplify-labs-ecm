{
  "version": 3,
  "sources": ["../../../../../node_modules/@dazn/lambda-powertools-correlation-ids/index.js", "../../../../../node_modules/@dazn/lambda-powertools-logger/index.js", "../lib/index.ts"],
  "sourcesContent": ["const DEBUG_LOG_ENABLED = 'debug-log-enabled'\n\nclass CorrelationIds {\n  constructor (context = {}) {\n    this.context = context\n  }\n\n  clearAll () {\n    this.context = {}\n  }\n\n  replaceAllWith (ctx) {\n    this.context = ctx\n  }\n\n  set (key, value) {\n    if (!key.startsWith('x-correlation-')) {\n      key = 'x-correlation-' + key\n    }\n\n    this.context[key] = value\n  }\n\n  get () {\n    return this.context\n  }\n\n  get debugLoggingEnabled () {\n    return this.context[DEBUG_LOG_ENABLED] === 'true'\n  }\n\n  set debugLoggingEnabled (enabled) {\n    this.context[DEBUG_LOG_ENABLED] = enabled ? 'true' : 'false'\n  }\n\n  static clearAll () {\n    globalCorrelationIds.clearAll()\n  }\n\n  static replaceAllWith (...args) {\n    globalCorrelationIds.replaceAllWith(...args)\n  }\n\n  static set (...args) {\n    globalCorrelationIds.set(...args)\n  }\n\n  static get () {\n    return globalCorrelationIds.get()\n  }\n\n  static get debugLoggingEnabled () {\n    return globalCorrelationIds.debugLoggingEnabled\n  }\n\n  static set debugLoggingEnabled (enabled) {\n    globalCorrelationIds.debugLoggingEnabled = enabled\n  }\n}\n\nif (!global.CORRELATION_IDS) {\n  global.CORRELATION_IDS = new CorrelationIds()\n}\n\nconst globalCorrelationIds = global.CORRELATION_IDS\n\nmodule.exports = CorrelationIds\n", "const CorrelationIds = require('@dazn/lambda-powertools-correlation-ids')\n\n// Levels here are identical to bunyan practices\n// https://github.com/trentm/node-bunyan#levels\nconst LogLevels = {\n  DEBUG: 20,\n  INFO: 30,\n  WARN: 40,\n  ERROR: 50\n}\n\n// most of these are available through the Node.js execution environment for Lambda\n// see https://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html\nconst DEFAULT_CONTEXT = {\n  awsRegion: process.env.AWS_REGION || process.env.AWS_DEFAULT_REGION,\n  functionName: process.env.AWS_LAMBDA_FUNCTION_NAME,\n  functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION,\n  functionMemorySize: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE,\n  environment: process.env.ENVIRONMENT || process.env.STAGE // convention in our functions\n}\n\nclass Logger {\n  constructor ({\n    correlationIds = CorrelationIds,\n    level = process.env.LOG_LEVEL\n  } = {}) {\n    this.correlationIds = correlationIds\n    this.level = (level || 'DEBUG').toUpperCase()\n    this.originalLevel = this.level\n\n    if (correlationIds.debugEnabled) {\n      this.enableDebug()\n    }\n  }\n\n  get context () {\n    return {\n      ...DEFAULT_CONTEXT,\n      ...this.correlationIds.get()\n    }\n  }\n\n  isEnabled (level) {\n    return level >= (LogLevels[this.level] || LogLevels.DEBUG)\n  }\n\n  appendError (params, err) {\n    if (!err) {\n      return params\n    }\n\n    return {\n      ...params || {},\n      errorName: err.name,\n      errorMessage: err.message,\n      stackTrace: err.stack\n    }\n  }\n\n  log (levelName, message, params) {\n    const level = LogLevels[levelName]\n    if (!this.isEnabled(level)) {\n      return\n    }\n\n    const logMsg = {\n      ...this.context,\n      ...params,\n      level,\n      sLevel: levelName,\n      message\n    }\n\n    const consoleMethods = {\n      DEBUG: console.debug,\n      INFO: console.info,\n      WARN: console.warn,\n      ERROR: console.error\n    }\n\n    // re-order message and params to appear earlier in the log row\n    consoleMethods[levelName](JSON.stringify({ message, ...params, ...logMsg }, (key, value) => typeof value === 'bigint'\n      ? value.toString()\n      : value\n    ))\n  }\n\n  debug (msg, params) {\n    this.log('DEBUG', msg, params)\n  }\n\n  info (msg, params) {\n    this.log('INFO', msg, params)\n  }\n\n  warn (msg, params, err) {\n    const parameters = !err && params instanceof Error ? this.appendError({}, params) : this.appendError(params, err)\n    this.log('WARN', msg, parameters)\n  }\n\n  error (msg, params, err) {\n    const parameters = !err && params instanceof Error ? this.appendError({}, params) : this.appendError(params, err)\n    this.log('ERROR', msg, parameters)\n  }\n\n  enableDebug () {\n    this.level = 'DEBUG'\n    return () => this.resetLevel()\n  }\n\n  resetLevel () {\n    this.level = this.originalLevel\n  }\n\n  static debug (...args) {\n    globalLogger.debug(...args)\n  }\n\n  static info (...args) {\n    globalLogger.info(...args)\n  }\n\n  static warn (...args) {\n    globalLogger.warn(...args)\n  }\n\n  static error (...args) {\n    globalLogger.error(...args)\n  }\n\n  static enableDebug () {\n    return globalLogger.enableDebug()\n  }\n\n  static resetLevel () {\n    globalLogger.resetLevel()\n  }\n\n  static get level () {\n    return globalLogger.level\n  }\n}\n\nconst globalLogger = new Logger()\n\nmodule.exports = Logger\n", "import logger from '@dazn/lambda-powertools-logger';\nimport { DynamoDBStreamEvent } from 'aws-lambda';\n\nexport const handler = async (event: DynamoDBStreamEvent): Promise<string> => {\n  logger.info('Input event', event);\n  return 'Successfully processed DynamoDB record';\n};\n"],
  "mappings": "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",
  "names": ["module", "module", "logger"]
}
